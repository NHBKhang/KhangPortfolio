import { useEffect, useState } from 'react';
import styles from '../../styles/pages/Quiz30_4.module.css';
import CustomHead from '../../components/base/Head';
import BackButton from '../../components/buttons/BackButton';
import { useGlobalContext } from '../../configs/GlobalContext';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import { getGame } from '../api/games';
import { useLanguage } from '../../configs/LanguageContext';
import { useTranslation } from 'next-i18next';
import Confetti from '../../components/holidays/Confetti';

const questions = [
    {
        question: 'Ng√†y 30/04/1975 g·∫Øn li·ªÅn v·ªõi s·ª± ki·ªán g√¨?',
        options: [
            'Chi·∫øn d·ªãch ƒêi·ªán Bi√™n Ph·ªß',
            'Gi·∫£i ph√≥ng mi·ªÅn Nam, th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc',
            'Kh·ªüi nghƒ©a Nam K·ª≥',
            'Chi·∫øn d·ªãch H·ªì Ch√≠ Minh'
        ],
        correctIndex: 2,
    },
    {
        question: 'Chi·∫øn d·ªãch cu·ªëi c√πng trong kh√°ng chi·∫øn ch·ªëng M·ªπ l√† g√¨?',
        options: ['Chi·∫øn d·ªãch M·∫≠u Th√¢n', 'Chi·∫øn d·ªãch T√¢y Nguy√™n', 'Chi·∫øn d·ªãch H·ªì Ch√≠ Minh', 'Chi·∫øn d·ªãch ƒê∆∞·ªùng 9 Nam L√†o'],
        correctIndex: 3,
    },
    {
        question: 'Ai l√† ng∆∞·ªùi ƒë·ªçc tuy√™n b·ªë ch·∫•m d·ª©t ch√≠nh quy·ªÅn S√†i G√≤n ng√†y 30/04/1975?',
        options: ['Ng√¥ ƒê√¨nh Di·ªám', 'D∆∞∆°ng VƒÉn Minh', 'Tr·∫ßn Thi·ªán Khi√™m', 'Nguy·ªÖn VƒÉn Thi·ªáu'],
        correctIndex: 2,
    },
    {
        question: 'NƒÉm 1975 ƒë√°nh d·∫•u s·ª± ki·ªán g√¨ t·∫°i Vi·ªát Nam?',
        options: [
            'Mi·ªÅn Nam ho√†n to√†n gi·∫£i ph√≥ng',
            'B·∫Øt ƒë·∫ßu chi·∫øn tranh bi√™n gi·ªõi',
            'Hi·ªáp ƒë·ªãnh Paris ƒë∆∞·ª£c k√Ω k·∫øt',
            'C·∫£i c√°ch ru·ªông ƒë·∫•t'
        ],
        correctIndex: 1,
    },
    {
        question: 'Ng√†y 30/04 ƒë∆∞·ª£c g·ªçi l√† g√¨ t·∫°i Vi·ªát Nam?',
        options: ['Ng√†y Qu·ªëc Kh√°nh', 'Ng√†y Lao ƒë·ªông', 'Ng√†y Nh√† gi√°o Vi·ªát Nam', 'Ng√†y Gi·∫£i ph√≥ng mi·ªÅn Nam'],
        correctIndex: 4,
    },
]

const Quiz30_4 = ({ game }) => {
    const { setChatboxHidden, setExplorerHidden } = useGlobalContext();
    const { language } = useLanguage();
    const { t } = useTranslation('quiz30-4');
    const [current, setCurrent] = useState(0);
    const [score, setScore] = useState(0);
    const [done, setDone] = useState(false);

    const handleAnswer = (index) => {
        if (index === questions[current].correctIndex - 1) {
            setScore(score + 1)
        }
        if (current + 1 < questions.length) {
            setCurrent(current + 1)
        } else {
            setDone(true)
        }
    }

    useEffect(() => {
        setChatboxHidden(true);
        setExplorerHidden(true);
    }, []);

    return (
        <>
            <CustomHead page={'playingGame'} params={{ name: game.name[language] }} />
            <BackButton pathname={`/games/${game.id}`} callback={() => setExplorerHidden(false)} />
            <div className={styles.container}>
                <h1 className={styles.title}>üß† {t('title')}</h1>
                {!done ? (
                    <div className={styles.quizCard}>
                        <h2 className={styles.question}>
                            C√¢u {current + 1}: {questions[current].question}
                        </h2>
                        <div className="space-y-2">
                            {questions[current].options.map((option, i) => (
                                <button
                                    key={i}
                                    onClick={() => handleAnswer(i)}
                                    className={styles.optionButton}
                                >
                                    {option}
                                </button>
                            ))}
                        </div>
                    </div>
                ) : (
                    <div className={styles.doneMessage}>
                        <p className={styles.doneMessageText}>üéâ B·∫°n ho√†n th√†nh quiz!</p>
                        <p className={styles.doneMessageSubText}>ƒêi·ªÉm s·ªë: {score} / {questions.length}</p>
                        <button
                            onClick={() => {
                                setCurrent(0)
                                setScore(0)
                                setDone(false)
                            }}
                            className={styles.retryButton}
                        >
                            Ch∆°i l·∫°i
                        </button>
                    </div>
                )}
            </div>

            {done && score / questions.length > 0.5 && <Confetti />}
        </>
    )
}

export async function getStaticProps({ locale }) {
    const game = getGame(3);

    return {
        props: {
            game: game || null,
            ...(await serverSideTranslations(locale, ['common', 'quiz30-4'])),
        },
        revalidate: 60,
    };
}

export default Quiz30_4;